@page "/tasks"
@using TaskManager.Domain.Entities
@using TaskManager.Application.Interfaces
@inject ITaskService TaskService
@rendermode InteractiveServer

<PageTitle>Gestión de Tareas</PageTitle>

<h1 class="mb-4">📋 Gestión de Tareas</h1>

<div class="row mb-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">➕ Nueva Tarea</h5>
            </div>
            <div class="card-body">
                <EditForm Model="@newTask" OnValidSubmit="@CreateTask">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Título</label>
                            <InputText class="form-control" @bind-Value="newTask.Title" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Prioridad</label>
                            <InputSelect class="form-select" @bind-Value="newTask.Priority">
                                <option value="@TaskPriority.Low">Baja</option>
                                <option value="@TaskPriority.Medium">Media</option>
                                <option value="@TaskPriority.High">Alta</option>
                                <option value="@TaskPriority.Critical">Crítica</option>
                            </InputSelect>
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button type="submit" class="btn btn-success w-100">
                                <span class="oi oi-plus"></span> Crear
                            </button>
                        </div>
                        <div class="col-md-12">
                            <label class="form-label">Descripción</label>
                            <InputTextArea class="form-control" rows="2" @bind-Value="newTask.Description" />
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header bg-warning">
                <h5 class="mb-0">⏳ Tareas Pendientes (@pendingTasks.Count())</h5>
            </div>
            <div class="card-body">
                @if (!pendingTasks.Any())
                {
                    <p class="text-muted text-center">No hay tareas pendientes 🎉</p>
                }
                else
                {
                    @foreach (var task in pendingTasks)
                    {
                        <div class="card mb-2 border-start border-@GetPriorityColor(task.Priority) border-4">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h6 class="card-title">@task.Title</h6>
                                        <p class="card-text text-muted small mb-2">@task.Description</p>
                                        <small class="text-muted">
                                            📅 @task.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                                            | 🏷️ @GetPriorityLabel(task.Priority)
                                        </small>
                                    </div>
                                    <div class="btn-group-vertical">
                                        <button class="btn btn-sm btn-success" @onclick="() => CompleteTask(task.Id)">
                                            ✓
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteTask(task.Id)">
                                            🗑️
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">✅ Tareas Completadas (@completedTasks.Count())</h5>
            </div>
            <div class="card-body">
                @if (!completedTasks.Any())
                {
                    <p class="text-muted text-center">No hay tareas completadas aún</p>
                }
                else
                {
                    @foreach (var task in completedTasks)
                    {
                        <div class="card mb-2 bg-light">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h6 class="card-title text-decoration-line-through">@task.Title</h6>
                                        <p class="card-text text-muted small mb-2">@task.Description</p>
                                        <small class="text-muted">
                                            ✓ Completada: @task.CompletedAt?.ToString("dd/MM/yyyy HH:mm")
                                        </small>
                                    </div>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTask(task.Id)">
                                        🗑️
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private TaskItem newTask = new();
    private IEnumerable<TaskItem> pendingTasks = new List<TaskItem>();
    private IEnumerable<TaskItem> completedTasks = new List<TaskItem>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        pendingTasks = await TaskService.GetPendingTasksAsync();
        completedTasks = await TaskService.GetCompletedTasksAsync();
    }

    private async Task CreateTask()
    {
        if (!string.IsNullOrWhiteSpace(newTask.Title))
        {
            await TaskService.CreateTaskAsync(newTask);
            newTask = new TaskItem();
            await LoadTasks();
        }
    }

    private async Task CompleteTask(int id)
    {
        await TaskService.CompleteTaskAsync(id);
        await LoadTasks();
    }

    private async Task DeleteTask(int id)
    {
        await TaskService.DeleteTaskAsync(id);
        await LoadTasks();
    }

    private string GetPriorityColor(TaskPriority priority)
    {
        return priority switch
        {
            TaskPriority.Low => "info",
            TaskPriority.Medium => "warning",
            TaskPriority.High => "orange",
            TaskPriority.Critical => "danger",
            _ => "secondary"
        };
    }

    private string GetPriorityLabel(TaskPriority priority)
    {
        return priority switch
        {
            TaskPriority.Low => "Baja",
            TaskPriority.Medium => "Media",
            TaskPriority.High => "Alta",
            TaskPriority.Critical => "Crítica",
            _ => "Sin prioridad"
        };
    }
}